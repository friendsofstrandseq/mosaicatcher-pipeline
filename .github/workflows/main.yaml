name: Workflow checks

on:
  push:
    branches:
      - master
      - smk_workflow_catalog

jobs:
  # build_container:
  #   name: Build and push image
  #   runs-on: ubuntu-20.04
  #   env:
  #     IMAGE_NAME: mosaicatcher-pipeline

  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Read upstream tag without version
  #       id: gettag
  #       run: echo "::set-output name=tag::$(head -n 1 github-actions-runner/Dockerfile | awk -F':' '{print $2}' | awk -F'-' 'BEGIN { OFS="-" } {$NF=""; print $0}')"

  #     - name: Read internal update version
  #       id: getversion
  #       run: echo "::set-output name=version::$(grep 'ARG RUNNER_VERSION' github-actions-runner/Dockerfile | awk -F'=' '{print $2}')"

  #     - name: Build Image
  #       id: build-image
  #       uses: redhat-actions/buildah-build@v2
  #       with:
  #         image: ${{ env.IMAGE_NAME }}
  #         tags: "1.5.1"
  #         dockerfiles: |
  #           ./github-actions-runner/Dockerfile

  #     - name: Push To DockerHub
  #       id: push-to-dockerhub
  #       uses: redhat-actions/push-to-registry@v2
  #       with:
  #         image: ${{ steps.build-image.outputs.image }}
  #         tags: ${{ steps.build-image.outputs.tags }}
  #         registry: docker.io/weber8thomas
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_TOKEN }}

  #     - name: Use the image
  #       run: echo "New images has been pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

  # WORK
  Formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Formatting
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_SNAKEMAKE_SNAKEFMT: true

  Linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Linting
        uses: snakemake/snakemake-github-action@v1.22.0
        with:
          directory: .
          snakefile: ./Snakefile
          stagein: 'file=$(grep snv_sites ./config/config.yaml| grep -P -o "sandbox.*") && mkdir -p "${file%/*}" && touch "$file" && file=$(grep -P "^reference" mosaicatcher-update/config/config.yaml| grep -P -o "sandbox.*") && mkdir -p "${file%/*}" && touch "$file" && mamba env remove -n snakemake && mamba create -y -n snakemake -c conda-forge -c bioconda unzip snakemake pandas pysam tqdm imagemagick && source activate snakemake && ls -l && pwd'
          args: "--lint"

  Testing:
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    # needs:
    #   - Linting
    #   - Formatting
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          conda install -c conda-forge mamba
      - name: Setup snakemake
        run: |
          mamba create -n mosaicatcher_env -c conda-forge -c bioconda pandas tqdm pysam snakemake imagemagick singularity && source activate mosaicatcher_env
      - name: Lint with snakemake and snakefmt
        run: |
          snakemake --cores 12 --config mode=mosaiclassifier plot=True chromosomes="[chr21]" --use-conda --use-singularity --latency-wait 60

      # - name: Downloading data
      #   uses: snakemake/snakemake-github-action@v1.22.0
      #   with:
      #     directory: .
      #     snakefile: ./Snakefile
      #     stagein: "mamba env remove -n snakemake && mamba create -y -n snakemake -c conda-forge -c bioconda unzip snakemake pandas pysam tqdm imagemagick && source activate snakemake "
      #     args: "--cores 1 --config mode=download_data dl_external_files=True"

      # - name: Testing data
      #   uses: snakemake/snakemake-github-action@v1.22.0
      #   with:
      #     directory: .
      #     snakefile: ./Snakefile
      #     stagein: " mamba env remove -n snakemake && mamba create -y -n snakemake -c conda-forge -c bioconda snakemake pandas pysam tqdm imagemagick && source activate snakemake  && conda create -f .test/conda/complete_env.yaml && source activate cpp_copy && cd workflow/scripts/Mosaic/ && mkdir build && cmake ../src/ && cmake --build . && ln -s mosaic /usr/local/sbin/mosaic"
      #     args: '--cores -12 --config chromosomes="[chr21]" mode=mosaiclassifier plot=True input_bam_location=.test/data/ output_location=.test/output/ --use-conda --latency-wait 60'
